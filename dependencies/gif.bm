'#######################################################################################
'# Animated GIF decoder v1.0                                                           #
'# By Zom-B                                                                            #
'#######################################################################################

SUB openGif (filename as string, gifData AS GIFDATA, frameData() AS FRAMEDATA) STATIC
    freen = FREEFILE
    gifData.file = freen
    OPEN "B", gifData.file, filename

    GET freen, , gifData.sigver
    GET freen, , gifData.width
    GET freen, , gifData.height
    GET freen, , byte~%%
    gifData.bpp = (byte~%% AND 7) + 1
    gifData.sortFlag = (byte~%% AND 8) > 0
    gifData.colorRes = (byte~%% \ 16 AND 7) + 1
    gifData.colorTableFlag = (byte~%% AND 128) > 0
    gifData.numColors = 2 ^ gifData.bpp
    GET freen, , gifData.bgColor
    GET freen, , byte~%%
    IF byte~%% = 0 THEN gifData.aspect = 0 ELSE gifData.aspect = (byte~%% + 15) / 64

    IF gifData.sigver <> "GIF87a" AND gifData.sigver <> "GIF89a" THEN _DEST 0: PRINT "Invalid version": END
    IF NOT gifData.colorTableFlag THEN _DEST 0: PRINT "No Color Table": END

    palette$ = SPACE$(3 * gifData.numColors)
    GET freen, , palette$
    gifData.palette = palette$
    IF Dbg AND 1 THEN
        PRINT "sigver         ="; gifData.sigver
        PRINT "width          ="; gifData.width
        PRINT "height         ="; gifData.height
        PRINT "bpp            ="; gifData.bpp
        PRINT "sortFlag       ="; gifData.sortFlag
        PRINT "colorRes       ="; gifData.colorRes
        PRINT "colorTableFlag ="; gifData.colorTableFlag
        PRINT "bgColor        ="; gifData.bgColor
        PRINT "aspect         ="; gifData.aspect
        PRINT "numColors      ="; gifData.numColors
        FOR i = 0 TO gifData.numColors - 1
            PRINT USING "pal(###) = "; i;
            PRINT HEX$(_RGB32(ASC(gifData.palette, i * 3 + 1), ASC(gifData.palette, i * 3 + 2), ASC(gifData.palette, i * 3 + 3)))
        NEXT
    END IF
    DO
        GET freen, , byte~%%
        IF Dbg AND 2 THEN PRINT "Chunk: "; HEX$(byte~%%)
        SELECT CASE byte~%%
            CASE &H2C ' Image Descriptor
                IF frame > UBOUND(frameData) THEN
                    REDIM _PRESERVE frameData(0 TO frame * 2 - 1) AS FRAMEDATA
                END IF

                GET freen, , frameData(frame).left
                GET freen, , frameData(frame).top
                GET freen, , frameData(frame).width
                GET freen, , frameData(frame).height
                GET freen, , byte~%%
                frameData(frame).localColorTableFlag = (byte~%% AND 128) > 0
                frameData(frame).interlacedFlag = (byte~%% AND 64) > 0
                frameData(frame).sortFlag = (byte~%% AND 32) > 0
                frameData(frame).palBPP = (byte~%% AND 7) + 1
                frameData(frame).addr = LOC(freen) + 1

                IF frameData(frame).localColorTableFlag THEN
                    SEEK freen, LOC(freen) + 3 * 2 ^ frameData(frame).palBPP + 1
                END IF
                GET freen, , frameData(frame).minimumCodeSize
                IF Dbg AND 2 THEN
                    PRINT "addr                ="; HEX$(frameData(frame).addr - 1)
                    PRINT "left                ="; frameData(frame).left
                    PRINT "top                 ="; frameData(frame).top
                    PRINT "width               ="; frameData(frame).width
                    PRINT "height              ="; frameData(frame).height
                    PRINT "localColorTableFlag ="; frameData(frame).localColorTableFlag
                    PRINT "interlacedFlag      ="; frameData(frame).interlacedFlag
                    PRINT "sortFlag            ="; frameData(frame).sortFlag
                    PRINT "palBPP              ="; frameData(frame).palBPP
                    PRINT "minimumCodeSize     ="; frameData(frame).minimumCodeSize
                END IF
                IF localColors THEN _DEST 0: PRINT "Local color table": END
                IF frameData(frame).disposalMethod > 2 THEN PRINT "Unsupported disposalMethod: "; frameData(frame).disposalMethod: END
                skipBlocks freen

                frame = frame + 1
            CASE &H3B ' Trailer
                EXIT DO
            CASE &H21 ' Extension Introducer
                GET freen, , byte~%% ' Extension Label
                IF Dbg AND 2 THEN PRINT "Extension Introducer: "; HEX$(byte~%%)
                SELECT CASE byte~%%
                    CASE &HFF, &HFE ' Application Extension, Comment Extension
                        skipBlocks freen
                    CASE &HF9
                        IF frame > UBOUND(frameData) THEN
                            REDIM _PRESERVE frameData(0 TO frame * 2 - 1) AS FRAMEDATA
                        END IF

                        GET 1, , byte~%% ' Block Size (always 4)
                        GET 1, , byte~%%
                        frameData(frame).transparentFlag = (byte~%% AND 1) > 0
                        frameData(frame).userInput = (byte~%% AND 2) > 0
                        frameData(frame).disposalMethod = byte~%% \ 4 AND 7
                        GET 1, , delay~%
                        IF delay~% = 0 THEN frameData(frame).delay = 0.1 ELSE frameData(frame).delay = delay~% / 100
                        GET 1, , frameData(frame).transColor
                        IF Dbg AND 2 THEN
                            PRINT "frame           ="; frame
                            PRINT "transparentFlag ="; frameData(frame).transparentFlag
                            PRINT "userInput       ="; frameData(frame).userInput
                            PRINT "disposalMethod  ="; frameData(frame).disposalMethod
                            PRINT "delay           ="; frameData(frame).delay
                            PRINT "transColor      ="; frameData(frame).transColor
                        END IF
                        skipBlocks freen
                    CASE ELSE
                        PRINT "Unsupported extension Label: "; HEX$(byte~%%): END
                END SELECT
            CASE ELSE
                PRINT "Unsupported chunk: "; HEX$(byte~%%): END
        END SELECT
    LOOP

    REDIM _PRESERVE frameData(0 TO frame - 1) AS FRAMEDATA
END SUB

SUB skipBlocks (freen)
    DO
        GET freen, , byte~%% ' Block Size
        IF Dbg AND 2 THEN PRINT "block size ="; byte~%%
        SEEK freen, LOC(freen) + byte~%% + 1
    LOOP WHILE byte~%%
END SUB

FUNCTION getGifFrame& (gifData AS GIFDATA, frameData() AS FRAMEDATA, frame)
    IF frameData(frame).addr > 0 THEN
        IF Dbg AND 4 THEN
            PRINT "addr                ="; HEX$(frameData(frame).addr - 1)
            PRINT "left                ="; frameData(frame).left
            PRINT "top                 ="; frameData(frame).top
            PRINT "width               ="; frameData(frame).width
            PRINT "height              ="; frameData(frame).height
            PRINT "localColorTableFlag ="; frameData(frame).localColorTableFlag
            PRINT "interlacedFlag      ="; frameData(frame).interlacedFlag
            PRINT "sortFlag            ="; frameData(frame).sortFlag
            PRINT "palBPP              ="; frameData(frame).palBPP
            PRINT "minimumCodeSize     ="; frameData(frame).minimumCodeSize
            PRINT "transparentFlag     ="; frameData(frame).transparentFlag
            PRINT "userInput           ="; frameData(frame).userInput
            PRINT "disposalMethod      ="; frameData(frame).disposalMethod
            PRINT "delay               ="; frameData(frame).delay
            PRINT "transColor          ="; frameData(frame).transColor
        END IF
        w = frameData(frame).width
        h = frameData(frame).height
        img& = _NEWIMAGE(w, h, 256)
        frame& = _NEWIMAGE(gifData.width, gifData.height, 256)

        _DEST img&
        decodeFrame gifData, frameData(frame)

        _DEST frame&
        IF frameData(frame).localColorTableFlag THEN
            _COPYPALETTE img&
        ELSE
            FOR i = 0 TO gifData.numColors - 1
                _PALETTECOLOR i, _RGB32(ASC(gifData.palette, i * 3 + 1), ASC(gifData.palette, i * 3 + 2), ASC(gifData.palette, i * 3 + 3))
            NEXT
        END IF

        IF frame THEN
            SELECT CASE frameData(frame - 1).disposalMethod
                CASE 0, 1
                    _PUTIMAGE , frameData(frame - 1).addr
                CASE 2
                    CLS , gifData.bgColor
                    _CLEARCOLOR gifData.bgColor
            END SELECT
        ELSE
            CLS , gifData.bgColor
        END IF

        IF frameData(frame).transparentFlag THEN
            _CLEARCOLOR frameData(frame).transColor, img&
        END IF
        _PUTIMAGE (frameData(frame).left, frameData(frame).top), img&
        _FREEIMAGE img&

        frameData(frame).addr = frame&
        _DEST 0
    END IF

    getGifFrame& = frameData(frame).addr
END FUNCTION


'############################################################################################

SUB decodeFrame (gifdata AS GIFDATA, framedata AS FRAMEDATA)
    DIM byte AS _UNSIGNED _BYTE
    DIM prefix(4095), suffix(4095), colorStack(4095)

    startCodeSize = gifdata.bpp + 1
    clearCode = 2 ^ gifdata.bpp
    endCode = clearCode + 1
    minCode = endCode + 1
    startMaxCode = clearCode * 2 - 1
    nvc = minCode
    codeSize = startCodeSize
    maxCode = startMaxCode

    IF framedata.interlacedFlag THEN interlacedPass = 0: interlacedStep = 8
    bitPointer = 0
    blockSize = 0
    blockPointer = 0
    x = 0
    y = 0

    freen = gifdata.file
    SEEK freen, framedata.addr

    IF framedata.localColorTableFlag THEN
        palette$ = SPACE$(3 * 2 ^ framedata.palBPP)
        GET 1, , palette$

        FOR i = 0 TO gifdata.numColors - 1
            c& = _RGB32(ASC(palette$, i * 3 + 1), ASC(palette$, i * 3 + 2), ASC(palette$, i * 3 + 3))
            _PALETTECOLOR i, c&
        NEXT
    END IF

    GET freen, , byte ' minimumCodeSize

    DO
        GOSUB GetCode
        stackPointer = 0
        IF code = clearCode THEN 'Reset & Draw next color direct
            nvc = minCode '           \
            codeSize = startCodeSize ' Preset default codes
            maxCode = startMaxCode '  /

            GOSUB GetCode
            currentCode = code

            lastColor = code
            colorStack(stackPointer) = lastColor
            stackPointer = 1
        ELSEIF code <> endCode THEN 'Draw direct color or colors from suffix
            currentCode = code
            IF currentCode = nvc THEN 'Take last color too
                currentCode = oldCode
                colorStack(stackPointer) = lastColor
                stackPointer = stackPointer + 1
            END IF

            WHILE currentCode >= minCode 'Extract colors from suffix
                colorStack(stackPointer) = suffix(currentCode)
                stackPointer = stackPointer + 1
                currentCode = prefix(currentCode) 'Next color from suffix is described in
            WEND '                                 the prefix, else prefix is the last col.

            lastColor = currentCode '              Last color is equal to the
            colorStack(stackPointer) = lastColor ' last known code (direct, or from
            stackPointer = stackPointer + 1 '      Prefix)
            suffix(nvc) = lastColor 'Automatically, update suffix
            prefix(nvc) = oldCode 'Code from the session before (for extracting from suffix)
            nvc = nvc + 1

            IF nvc > maxCode AND codeSize < 12 THEN
                codeSize = codeSize + 1
                maxCode = maxCode * 2 + 1
            END IF
        END IF

        FOR i = stackPointer - 1 TO 0 STEP -1
            PSET (x, y), colorStack(i)
            x = x + 1
            IF x = framedata.width THEN
                x = 0
                IF framedata.interlacedFlag THEN
                    y = y + interlacedStep
                    IF y >= framedata.height THEN
                        SELECT CASE interlacedPass
                            CASE 0: interlacedPass = 1: y = 4
                            CASE 1: interlacedPass = 2: y = 2
                            CASE 2: interlacedPass = 3: y = 1
                        END SELECT
                        interlacedStep = 2 * y
                    END IF
                ELSE
                    y = y + 1
                END IF
            END IF
        NEXT

        oldCode = code
    LOOP UNTIL code = endCode

    GET freen, , byte
    EXIT SUB

    GetCode:
    IF bitPointer = 0 THEN GOSUB ReadByteFromBlock: bitPointer = 8
    WorkCode& = LastChar \ powerOf2&(8 - bitPointer)
    WHILE codeSize > bitPointer
        GOSUB ReadByteFromBlock

        WorkCode& = WorkCode& OR LastChar * powerOf2&(bitPointer)
        bitPointer = bitPointer + 8
    WEND
    bitPointer = bitPointer - codeSize
    code = WorkCode& AND maxCode
    RETURN

    ReadByteFromBlock:
    IF blockPointer = blockSize THEN
        GET freen, , byte: blockSize = byte
        a$ = SPACE$(blockSize): GET freen, , a$
        blockPointer = 0
    END IF
    blockPointer = blockPointer + 1
    LastChar = ASC(MID$(a$, blockPointer, 1))
    RETURN
END SUB


SUB codeGif (gifData AS GIFDATA, frameData() AS FRAMEDATA)
    FOR i = 0 TO UBOUND(FRAMEDATA)
        IF frameData(i).addr < 0 THEN _FREEIMAGE frameData(i).addr
    NEXT

    CLOSE gifData.file
END SUB
